#!/bin/bash

# Configuration
###############
port=9999

# Functions
###########
function show_help {
    echo "Help Text"
    echo "Usage: $0 [options] tunnel-server"
    echo "Options:"
    echo -e "-h\tShow this help"
    echo -e "-p\tStart proxy on this port (default 9999)"
}

# Ask a question, defaults to yes
function yes_no_question () {
    read -r -p "$1 [Y/n] " response
    response=${response,,}
    if [[ "$response" =~ ^(yes|y|)$ ]]; then
        return 0
    else
        return 1
    fi
}

# Ask a question, defaults to no
function no_yes_question () {
    read -r -p "$1 [Y/n] " response
    response=${response,,}
    if [[ "$response" =~ ^(no|n|)$ ]]; then
        return 0
    else
        return 1
    fi
}

# Useful Variables
##################
# Directory containing this script
#  (no matter where it is called from)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
script_dir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Script
########

# Read Command Line Arguments
while getopts "hp:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        p)
            port=$OPTARG
            ;;
  esac
done

host=$1
cmd="ssh -CD $port $host"
echo "Connect to localhost:$port to use proxy"
echo "Connecting to $host as proxy..."
eval "$cmd"
